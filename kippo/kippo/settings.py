"""
Django settings for kippo project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import logging
import os
from pathlib import Path, PurePath

from django.conf.locale.en import formats as en_formats
from django.conf.locale.ja import formats as ja_formats

logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.getLogger("botocore").setLevel(logging.WARNING)
logging.getLogger("boto3").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


def strtobool(val: str | int | bool) -> bool:
    """Convert str/int value to bool"""
    if isinstance(val, bool):
        return val
    if isinstance(val, str):
        return val.lower() in ["true", "1", "t", "y", "yes"]
    if isinstance(val, int):
        return val == 1
    return bool(val)


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = PurePath(Path(__file__).resolve().parent.parent)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "(asz2@@dcx1zvj0j)ym_tz!z!!i#f$z5!hh_*stl@&e$sd#jya"  # noqa: S105

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")


# Application definition

INSTALLED_APPS = [
    "social_django",
    "reversion",
    "bootstrap4",
    "commons",  # must be *before* "'common.apps.KippoAdminConfig',  # 'django.contrib.admin'," in order to override admin template!
    "commons.admin.KippoAdminConfig",  # 'django.contrib.admin',
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "accounts",  # must be listed AFTER social_django and django.contrib.auth
    "projects",
    "tasks",
    "octocat",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware",
]

# https://github.com/evansd/whitenoise/issues/164
WHITENOISE_STATIC_PREFIX = "/static/"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

ROOT_URLCONF = "kippo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
                "kippo.context_processors.global_view_additional_context",  # PROVIDES settings.URL_PREFIX to context
            ]
        },
    }
]

WSGI_APPLICATION = "kippo.wsgi.application"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# TODO: for removal after whitenoise is configured
# # django-storages configuration
# # refer to:
# # https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
# DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
# STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
# STATICFILES_LOCATION = "static"
# STATIC_ROOT = BASE_DIR / "staticfiles"

# S3 Bucket Config
# -- for static files
# #    (For django-storages)
# AWS_STORAGE_BUCKET_NAME = os.environ.get("S3_BUCKET_NAME", "kippo-staticfiles")
# AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
# STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/"
# MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

STATIC_URL = os.getenv("STATIC_URL", "/static/")
MEDIA_URL = os.getenv("MEDIA_URL", "/media/")


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "kippo"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD", "mysecretpassword"),
        "HOST": os.getenv("DB_HOST", "127.0.0.1"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

USE_I18N = True

USE_L10N = True

USE_TZ = True

TIME_ZONE = "Asia/Tokyo"
# ISO 8601, ex: 2008-01-02T10:30:00.000123+02:00 "c"
# NOTE: Will not show timezone offset if datetime object is "naive"
ja_formats.DATETIME_FORMAT = "Y-m-d H:i:s (T)"  # "c"
ja_formats.DATE_FORMAT = "Y-m-d"
en_formats.DATETIME_FORMAT = "Y-m-d H:i:s (T)"  # "c"
en_formats.DATE_FORMAT = "Y-m-d"

DJANGO_LOG_LEVEL = "DEBUG"
LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {"standard": {"format": "{asctime} [{levelname:5}] ({name}) {funcName}: {message}", "style": "{"}},
    "handlers": {"console": {"class": "logging.StreamHandler", "formatter": "standard"}},
    "loggers": {
        "django": {"handlers": ["console"], "level": "INFO"},  # Change to DEBUG to see db queries
        "projects": {"handlers": ["console"], "level": DJANGO_LOG_LEVEL, "propagate": True},
        "tasks": {"handlers": ["console"], "level": DJANGO_LOG_LEVEL, "propagate": True},
        "accounts": {"handlers": ["console"], "level": DJANGO_LOG_LEVEL, "propagate": True},
        "octocat": {"handlers": ["console"], "level": DJANGO_LOG_LEVEL, "propagate": True},
    },
}

BOOTSTRAP4 = {
    "include_jquery": True,
    # The Bootstrap base URL
    "base_url": "//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/",
}

# -- for data backup/dump
DUMPDATA_S3_BUCKETNAME = "kippo-dumpdata-bucket-123xyz"
DUMPDATA_S3_KEY_PREFIX = "dumpdata/"

# Authentication
# http://docs.djangoproject.com/en/dev/ref/settings/?from=olddocs#authentication-backends
AUTHENTICATION_BACKENDS = ("social_core.backends.google.GoogleOAuth2", "django.contrib.auth.backends.ModelBackend")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
DEFAULT_URL_PREFIX = ""
URL_PREFIX = os.getenv("URL_PREFIX", DEFAULT_URL_PREFIX)
if URL_PREFIX and not URL_PREFIX.startswith("/"):
    URL_PREFIX = f"/{URL_PREFIX}"
STATIC_URL = f"{URL_PREFIX}/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

SOCIAL_AUTH_JSONFIELD_ENABLED = True
SOCIAL_AUTH_URL_NAMESPACE = "social"
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get("GOOGLE_OAUTH2_KEY", None)  # client ID
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get("GOOGLE_OAUTH2_SECRET", None)

# for integration of social_auth with admin
# https://python-social-auth.readthedocs.io/en/latest/configuration/django.html
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ["username", "first_name", "email"]

# for identification of SOCIAL_AUTH_USER
# http://python-social-auth.readthedocs.io/en/latest/configuration/settings.html#user-model
SOCIAL_AUTH_USER_MODEL = "accounts.KippoUser"
AUTH_USER_MODEL = SOCIAL_AUTH_USER_MODEL
SOCIAL_AUTH_LOGIN_REDIRECT_URL = f"{URL_PREFIX}/admin/"

# https://python-social-auth.readthedocs.io/en/latest/pipeline.html
SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. In some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    "social_core.pipeline.social_auth.social_details",
    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    "social_core.pipeline.social_auth.social_uid",
    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    "social_core.pipeline.social_auth.auth_allowed",
    # Checks if the current social-account is already associated in the site.
    "social_core.pipeline.social_auth.social_user",
    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    "social_core.pipeline.user.get_username",
    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',
    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    # 'social_core.pipeline.social_auth.associate_by_email',
    # Create a user account if we haven't found one yet.
    "social_core.pipeline.user.create_user",
    # Create the record that associates the social account with the user.
    "social_core.pipeline.social_auth.associate_user",
    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    "social_core.pipeline.social_auth.load_extra_data",
    # Update the user record with any changed info from the auth service.
    "social_core.pipeline.user.user_details",
    "accounts.functions.process_organizationinvites",  # process organization invites
)

GITHUB_MANAGER_USERNAME = "github-manager"
CLI_MANAGER_USERNAME = "cli-manager"

SITE_HEADER = "Kippo (Project Goal & Milestone Manager)"
SITE_TITLE = SITE_HEADER

DEFAULT_KIPPOPROJECT_CATEGORY = "poc"
DEFAULT_KIPPOTASK_CATEGORY = "study"
DEFAULT_TASK_DISPLAY_STATE = "in-progress"
DEFAULT_KIPPORPOJECT_TARGET_DATE_DAYS = 90

TEST = False

# internally defined users
UNASSIGNED_USER_GITHUB_LOGIN_PREFIX = "unassigned"  # for managing unassigned github tasks
DEFAULT_GITHUB_ISSUE_LABEL_CATEGORY_PREFIX = "category:"
DEFAULT_GITHUB_ISSUE_LABEL_ESTIMATE_PREFIX = "estimate:"
GITHUB_MILESTONE_CLOSE_STATE = "closed"

LOGIN_REDIRECT_URL = f"{URL_PREFIX}/admin/"  # defaults to /accounts/profile/#
HOST_URL = os.getenv("HOST_URL", "http://127.0.0.1")
WEBHOOK_ENDPOINT = "/octocat/webhook/"
WEBHOOK_URL = f"{HOST_URL}{URL_PREFIX}{WEBHOOK_ENDPOINT}"
DEFAULT_DISPLAY_ADMIN_AUTH_FOR_MODELBACKEND = "True"
DISPLAY_ADMIN_AUTH_FOR_MODELBACKEND = bool(strtobool(os.getenv("DISPLAY_ADMIN_AUTH_FOR_MODELBACKEND", DEFAULT_DISPLAY_ADMIN_AUTH_FOR_MODELBACKEND)))

DAY_WORKHOURS = 7

DEFAULT_WEBHOOK_DELETE_DAYS = "30"
WEBHOOK_DELETE_DAYS = int(os.getenv("WEBHOOK_DELETE_DAYS", DEFAULT_WEBHOOK_DELETE_DAYS))

PROJECTID_MAPPING_JSON_S3URI = os.getenv("PROJECTID_MAPPING_JSON_S3URI", None)

# AWS/BOTO3 Configuration
BOTO3_CONNECT_TIMEOUT = 15
TARGET_REGION = os.getenv("TARGET_REGION", "ap-northeast-1")  # AWS_DEFAULT_REGION/AWS_REGION is not editable, using TARGET_REGION

DEFAULT_S3_SERVICE_ENDPOINT = f"https://s3.{TARGET_REGION}.amazonaws.com"
DEFAULT_SQS_SERVICE_ENDPOINT = f"https://sqs.{TARGET_REGION}.amazonaws.com"

AWS_SERVICE_ENDPOINTS = {
    "s3": os.getenv("S3_SERVICE_ENDPOINT", DEFAULT_S3_SERVICE_ENDPOINT),
    "sqs": os.getenv("SQS_SERVICE_ENDPOINT", DEFAULT_SQS_SERVICE_ENDPOINT),
}
logger.info(f"AWS_SERVICE_ENDPOINTS: {AWS_SERVICE_ENDPOINTS}")

DEFAULT_FALLBACK_ESTIMATE_DAYS = "3"
FALLBACK_ESTIMATE_DAYS = int(os.getenv("FALLBACK_ESTIMATE_DAYS", DEFAULT_FALLBACK_ESTIMATE_DAYS))

TWO_YEARS_IN_DAYS = 365 * 2
DEFAULT_PROJECTID_MAPPING_CLOSED_IGNORED_DAYS = str(TWO_YEARS_IN_DAYS)
PROJECTID_MAPPING_CLOSED_IGNORED_DAYS = int(os.getenv("PROJECTID_MAPPING_CLOSED_IGNORED_DAYS", DEFAULT_PROJECTID_MAPPING_CLOSED_IGNORED_DAYS))


DEFAULT_INCLUDE_PERSIONALHOLIDAYS_IN_WORKEFFORT_CSV = "False"
INCLUDE_PERSIONALHOLIDAYS_IN_WORKEFFORT_CSV = bool(
    strtobool(os.getenv("INCLUDE_PERSIONALHOLIDAYS_IN_WORKEFFORT_CSV", DEFAULT_INCLUDE_PERSIONALHOLIDAYS_IN_WORKEFFORT_CSV))
)

DEFAULT_PROJECT_EFFORT_EXCEED_PERCENTAGE = "15"
PROJECT_EFFORT_EXCEED_PERCENTAGE = (
    int(os.getenv("PROJECT_EFFORT_EXCEED_PERCENTAGE", DEFAULT_PROJECT_EFFORT_EXCEED_PERCENTAGE)) / 100
)  # convert to percentage

DEFAULT_DELETE_DAYS = "60"
DELETE_DAYS = int(os.getenv("DELETE_DAYS", DEFAULT_DELETE_DAYS))

DEFAULT_OCTOCAT_APPLY_DEFAULT_LABELSET = "False"
OCTOCAT_APPLY_DEFAULT_LABELSET = bool(strtobool(os.getenv("OCTOCAT_APPLY_DEFAULT_LABELSET", DEFAULT_OCTOCAT_APPLY_DEFAULT_LABELSET)))

DEFAULT_OCTOCAT_DELETE_EXISTING_LABELS_ON_UPDATE = "False"
OCTOCAT_DELETE_EXISTING_LABELS_ON_UPDATE = bool(
    strtobool(os.getenv("OCTOCAT_DELETE_EXISTING_LABELS_ON_UPDATE", DEFAULT_OCTOCAT_DELETE_EXISTING_LABELS_ON_UPDATE))
)

DEFAULT_ORGANIZATIONINVITE_EXPIRATION_DAYS = 7
ORGANIZATIONINVITE_EXPIRATION_DAYS = int(os.getenv("ORGANIZATIONINVITE_EXPIRATION_DAYS", DEFAULT_ORGANIZATIONINVITE_EXPIRATION_DAYS))
