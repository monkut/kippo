[project]
name = "kippo"
version = "0.1.0"
description = "kippo"
authors = [{ name = "Kiconia Works", email = "developers@kiconiaworks.com" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.13,<3.14"
classifiers = [
    "Intended Audience :: Developers",
    "Private :: Do Not Upload",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "django>=5.2,<5.3",
    "psycopg[binary]",
    "social-auth-app-django",
    "django-reversion",
    "requests",
    "django-bootstrap4",
    "ghorgs@git+https://github.com/monkut/github-org-manager.git",
    "qlu@git+https://github.com/monkut/qlu-scheduler.git@0.2.12",
    "whitenoise",
    "django-cors-headers",
    "django-admin-rangefilter",
    "zappa>=0.60.0,<0.61.0",
    "slack_sdk",
]

[project.urls]
Repository = "https://github.com/kiconiaworks/kippo"

[dependency-groups]
dev = ["pyright>=1.1.396", "ruff>=0.9.10", "unittest-xml-reporting>=3.2.0",]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["."] by default)
include = ["kippo"]  # package names should match these glob patterns (["*"] by default)
exclude = []  # exclude packages matching these glob patterns (empty by default)

[tool.pyright]
include = ["kippo", "notebooks"]
exclude = ["**/.venv", "tmp/", "**/node_modules/", "**/__pycache__", "**/*.pyc", "**/tests/", "**/migrations/"]
typeCheckingMode = "basic"
pythonVersion = "3.13"

[tool.ruff]
line-length = 150
indent-width = 4
target-version ='py313'
exclude = [".git", ".venv", "**/node_modules/", "**/.volta", "jupyter/*", "**/migrations/" ]
fix = true
respect-gitignore = true
unsafe-fixes = false

[tool.ruff.lint]
select = ["ALL"]
extend-per-file-ignores = { "**/__init__.py" = ["I", "F403"] }
extend-safe-fixes = [
    "D200",  # unnecessary-multiline-docstring
    "ANN204"  # missing-return-type-special-method (__init__)
]
ignore = [
    "A005",
    "ANN002",
    "ANN003",
    "ANN201",
    "ARG002",
    "ARG003",
    "C401",  # rewrite as a set comprehension
    "COM812",
    "COM819",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D203",
    "D205",
    "D206",
    "D213",
    "D300",
    "D400",
    "D401",
    "D415",
    "DJ008",  # Model does not define `__str__` method
    "DTZ005",
    "E111",
    "E114",
    "E117",
    "EM101",
    "EM102",
    "ERA001",
    "EXE002",  # file is executable but no shebang is present
    "FBT",
    "FIX002",
    "G004",
    "INP001",
    "ISC001",
    "ISC002",
    "PERF401",  # Use `list.extend` to create a transformed list
    "PLR0913",
    "PT009",
    "PT011",
    "PT027",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "RET504",
    "RUF",
    "S101",
    "SIM108",  # if-else-block-instead-of-if-exp
    "SIM118",  # Use `key in dict` instead of `key in dict.keys()`
    "SLF001",
    "TC001",
    "TC002",
    "TC004",
    "TD002",  # missing-todo-author
    "TD003",
    "TID252",
    "TRY003",
]

exclude = ["target", "tmp", "data", "notebooks", "**/migrations/"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds this value.
max-complexity = 13

[tool.ruff.lint.isort]
combine-as-imports = true
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"